{
    "test adapter settings": "Adapter settings for test",
    "tabcountdown": "Countdown",
    "name": "Name",
    "days": "Days",
    "hours": "Hours",
    "mins": "Minutes",
    "secs": "Seconds",
    "behaviour": "Behaviour",
    "set to timer": "set to timer",
    "set to zero": "set to zero",
    "actions": "actions",
    "timer": "set to timer",
    "zero": "set to zero",
    "Adding Countdowns": "Adding Countdowns",
    "List Countdowns": "List Countdowns",
    "New Timeserie": "New Timeserie",
    "tabtimeseries": "Timeseries",
    "Create a new Timeseries.": "Create a new Timeseries.",
    "Timeseries List": "Timeseries List",
    "Timeseries": "Timeseries",
    "Actions": "Actions",
    "April": "April",
    "August": "August",
    "December": "December",
    "Duration for switching the datapoint": "Duration for switching the datapoint",
    "February": "February",
    "Frequency": "Frequency",
    "Friday": "Friday",
    "How many occurrences will be generated.": "How many occurrences will be generated.",
    "If given, it must be either an integer, or a sequence of integers, meaning the hours to apply the recurrence to.": "If given, it must be either an integer, or a sequence of integers, meaning the hours to apply the recurrence to.",
    "If given, it must be either an integer, or a sequence of integers, meaning the minutes to apply the recurrence to.": "If given, it must be either an integer, or a sequence of integers, meaning the minutes to apply the recurrence to.",
    "If given, it must be either an integer, or a sequence of integers, meaning the month days to apply the recurrence to.": "If given, it must be either an integer, or a sequence of integers, meaning the month days to apply the recurrence to.",
    "If given, it must be either an integer, or a sequence of integers, meaning the week numbers to apply the recurrence to. Week numbers have the meaning described in ISO8601, that is, the first week of the year is that containing at least four days of the new year.": "If given, it must be either an integer, or a sequence of integers, meaning the week numbers to apply the recurrence to. Week numbers have the meaning described in ISO8601, that is, the first week of the year is that containing at least four days of the new year.",
    "If given, it must be either an integer, or a sequence of integers, meaning the year days to apply the recurrence to.": "If given, it must be either an integer, or a sequence of integers, meaning the year days to apply the recurrence to.",
    "If given, it must be either an integer, or a sequence of integers, positive or negative. Each given integer will specify an occurrence number, corresponding to the nth occurrence of the rule inside the frequency period. For example, a <code>bysetpos</code> of <code>-1</code> if combined with a <code>MONTHLY</code> frequency, and a byweekday of ( <code>Monday</code>, <code>Tuesday</code>, <code>Wednsday</code>, <code>Thursday</code>, <code>Friday</code>), will result in the last work day of every month.": "If given, it must be either an integer, or a sequence of integers, positive or negative. Each given integer will specify an occurrence number, corresponding to the nth occurrence of the rule inside the frequency period. For example, a <code>bysetpos</code> of <code>-1</code> if combined with a <code>MONTHLY</code> frequency, and a byweekday of ( <code>Monday</code>, <code>Tuesday</code>, <code>Wednsday</code>, <code>Thursday</code>, <code>Friday</code>), will result in the last work day of every month.",
    "If given, it must be either one of the given weekdays or a sequence of integeres (Monday == 0). When given, these values will define the weekdays where the recurrence will be applied. It's also possible to use an argument n for the weekday instances, which will mean the nth occurrence of this weekday in the period. ": "If given, it must be either one of the given weekdays or a sequence of integeres (Monday == 0). When given, these values will define the weekdays where the recurrence will be applied. It's also possible to use an argument n for the weekday instances, which will mean the nth occurrence of this weekday in the period. ",
    "If given, it must be one of the given values or a sequence of integers, meaning the months to apply the recurrence to (January==1). ": "If given, it must be one of the given values or a sequence of integers, meaning the months to apply the recurrence to (January==1). ",
    "If given, this must be a <code>Date</code> instance, that will specify the limit of the recurrence. If a recurrence instance happens to be the same as the <code>Date</code> instance given in the <code>until</code> argument, this will be the last occurrence.": "If given, this must be a <code>Date</code> instance, that will specify the limit of the recurrence. If a recurrence instance happens to be the same as the <code>Date</code> instance given in the <code>until</code> argument, this will be the last occurrence.",
    "January": "January",
    "July": "July",
    "June": "June",
    "List of Timerules": "List of Timerules",
    "March": "March",
    "May": "May",
    "Monday": "Monday",
    "Name of the Timeseries. If empty a Number is used": "Name of the Timeseries. If empty a Number is used",
    "Name of the rule. If empty a Number is used": "Name of the rule. If empty a Number is used",
    "New Timerule": "New Timerule",
    "November": "November",
    "October": "October",
    "Result (max. 100)": "Result (max. 100)",
    "Rulename": "Rulename",
    "Saturday": "Saturday",
    "September": "September",
    "Specifying the first day of the week. This will affect recurrences based on weekly periods.": "Specifying the first day of the week. This will affect recurrences based on weekly periods.",
    "Sunday": "Sunday",
    "The interval between each freq iteration. For example, when using <code>RRule.YEARLY</code>, an interval of <code>2</code> means once every two years, but with <code>RRule.HOURLY</code>, it means once every two hours. The default interval is <code>1</code>.": "The interval between each freq iteration. For example, when using <code>RRule.YEARLY</code>, an interval of <code>2</code> means once every two years, but with <code>RRule.HOURLY</code>, it means once every two hours. The default interval is <code>1</code>.",
    "The recurrence start. Besides being the base for the recurrence, missing parameters in the final recurrence instances will also be extracted from this date. If not given, <code>new Date</code> will be used instead.": "The recurrence start. Besides being the base for the recurrence, missing parameters in the final recurrence instances will also be extracted from this date. If not given, <code>new Date</code> will be used instead.",
    "The timezone for the rule. If present, all recurrences will be interpreted as being in the local time of the given timezone. If not present, ": "The timezone for the rule. If present, all recurrences will be interpreted as being in the local time of the given timezone. If not present, ",
    "Thursday": "Thursday",
    "Timerule": "Timerule",
    "Tuesday": "Tuesday",
    "Wednsday": "Wednsday",
    "byhour": "byHour",
    "byminute": "byMinute",
    "bymonth": "byMonth",
    "bymonthday": "byMonthday",
    "bysetpos": "bySetpos",
    "byweekday": "byWeekday",
    "byweekno": "byWeekno",
    "byyearday": "byYearday",
    "count": "Count",
    "daily": "daily",
    "duration": "Duration",
    "frequency": "Frequency",
    "hourly": "hourly",
    "interval": "Interval",
    "minutely": "minutely",
    "monthly": "monthly",
    "start Date": "Start Date",
    "timeseries name": "Timeseries name",
    "timezone": "Timezone",
    "until Date": "Until Date",
    "weekly": "weekly",
    "weekstart": "Weekstart",
    "yearly": "yearly",
    "": ""
}